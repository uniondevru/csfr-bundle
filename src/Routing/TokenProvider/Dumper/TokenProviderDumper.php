<?php

namespace Genedys\CsrfRouteBundle\Routing\TokenProvider\Dumper;

use Genedys\CsrfRouteBundle\Routing\TokenProviderInterface;
use Symfony\Component\Routing\RouteCollection;

/**
 * @author Jáchym Toušek <enumag@gmail.com>
 */
class TokenProviderDumper implements TokenProviderDumperInterface
{
    /**
     * @var RouteCollection
     */
    private $routeCollection;

    public function __construct(RouteCollection $routeCollection)
    {
        $this->routeCollection = $routeCollection;
    }

    /**
     * Gets the routes to dump.
     *
     * @return RouteCollection
     */
    public function getRoutes()
    {
        return $this->routeCollection;
    }

    /**
     * Dumps a set of routes to a string representation of executable code
     * that can then be used to generate CSRF token for such a route.
     *
     * @param array $options
     *
     * @return string
     */
    public function dump(array $options = [])
    {
        $options = array_merge(array(
            'class' => 'ProjectCsrfTokenProvider',
            'base_class' => 'Genedys\\CsrfRouteBundle\\Routing\\TokenProvider\\TokenProvider',
        ), $options);

        if ($options['field_name'] === null) {
            throw new \InvalidArgumentException('Option field_name is required.');
        }

        $fieldName = var_export($options['field_name'], true);

        return <<<EOF
<?php

use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * This class has been auto-generated by the CsrfRouteBundle.
 */
class {$options['class']} extends {$options['base_class']}
{
    private static \$declaredRoutes;

    public function __construct()
    {
        parent::__construct({$fieldName});

        if (null === self::\$declaredRoutes) {
            self::\$declaredRoutes = {$this->generateDeclaredRoutes()};
        }
    }

{$this->generateGetCsrfTokenMethod()}
}

EOF;
    }

    /**
     * Generates PHP code representing an array of defined routes
     * together with the routes properties (e.g. requirements).
     *
     * @return string
     */
    private function generateDeclaredRoutes()
    {
        $routes = "array(\n";
        foreach ($this->getRoutes()->all() as $name => $route) {
            $properties = array();
            $properties[] = $route->getOption(TokenProviderInterface::OPTION_NAME);

            $routes .= sprintf("                '%s' => %s,\n", $name, str_replace("\n", '', var_export($properties, true)));
        }
        $routes .= '            )';

        return $routes;
    }

    /**
     * Generates PHP code representing the `getCsrfToken` method that implements the TokenProviderInterface.
     *
     * @return string
     */
    private function generateGetCsrfTokenMethod()
    {
        return <<<'EOF'
    public function getCsrfToken($name)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a CSRF token for the named route "%s" as such route does not exist.', $name));
        }

        list($csrfTokenOption) = self::$declaredRoutes[$name];

        return $this->getTokenFromOption($csrfTokenOption);
    }
EOF;
    }
}
